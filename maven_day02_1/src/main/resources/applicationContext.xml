<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			    http://www.springframework.org/schema/beans/spring-beans.xsd
			    http://www.springframework.org/schema/context
			    http://www.springframework.org/schema/context/spring-context.xsd
			    http://www.springframework.org/schema/aop
			    http://www.springframework.org/schema/aop/spring-aop.xsd
			    http://www.springframework.org/schema/tx
			    http://www.springframework.org/schema/tx/spring-tx.xsd
			    http://www.springframework.org/schema/mvc
			    http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--dao层配置文件开始-->
    <!--配置连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--配置驱动，通过反射的方式创建-->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql:///maven"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>
    <!--框架提供一个操作数据库的对象，sqlsession不能共享，安全-->
    <!--配置生产SqlSession对象的工厂-->
    <!--之前写的是接口，但是接口并不能被实例化，此刻选择实现类，配置属性-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--先把连接池放进来，没有连接池无法操作数据库，放进来对象，引用-->
        <property name="dataSource" ref="dataSource"/>
        <!--扫描pojo包，给包下所有pojo对象起别名，方便引用包下的对象-->
        <property name="typeAliasesPackage" value="com.learnCCC.domain"/>
    </bean>
    <!--sqlsession的gemapper方法，可以给接口生成代理对象。使用spring容器创建的对象，扔到容器中，因此这个逻辑就简单了，
    扫描接口，生成代理对象，放到容器中
    这里不写id了，因为一步完成了，不被别人调用了-->
    <!--扫描接口包路径，生成包下所有接口的代理对象，并且放入spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--让他生成哪些接口的代理对象？-->
        <property name="basePackage" value="com.learnCCC.dao"/>
    </bean>
    <!--dao层配置文件结束-->


    <!--service层配置文件开始-->

    <!--组件扫描配置-->
    <context:component-scan base-package="com.learnCCC.service"/>
    <!--内部使用aop变成模式，事务-->
    <!--aop面向切面编程，切面就是切入点和通知的组合，所谓通知就是增强类-->
    <!--只是这里的增强类是别人已经写好的-->
    <!--配置事务管理器-->
    <!--要控制事务需要用到connection，再用到连接池-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--事务管理器创建完成，一般管理配置完成，通知类自动配置，但这里的通知类不是自己写的，还需要进行个性化配置-->
    <!--配置事务的通知-->
    <!--不配置id可以默认，但是默认的比较长-->
    <tx:advice id="advice">
        <tx:attributes>
            <!--这里对操作进行约定，凡是方法名字，对于以save,find开头的方法进行约束，对于查询方法让他只读-->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true"/>
            <!--全局扫描-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--配置切面-->
    <aop:config>
        <!--配置切面表达式，这个类下任意的方法，任意的返回值-->

        <aop:pointcut id="pointcut" expression="execution(* com.learnCCC.service.impl.*.*(..))"/>
        <!--切入点有了，通知类也有了，整合，已经使用了spring的面向切面编程思想配置好事务-->
        <aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
    </aop:config>
    <!--service层配置文件结束-->





</beans>